I'm going to start with the justifications for for average comparisons and movements for each function as it will allow us to place counters with less tedium in the explanation step

4. Justifications 

	BubbleSort - Comparisons
	
for(var ii = array.length(); ii > 0; ii--) {-------------------------Occurs n times
	for(var j = 0; j < i - 1; j++) {                                -Occurs n-- times 
		if (array[j] > array[j+1]) { //comparison                   -
			var temp = array[j]                                     -
			array[j] = array[j+1]
			array[j+1] = temp;
		}
	}
}---------------------------------------------------------------------
		Our only comparison is contained within a for loop that executes a decreasing number of times (from n) (in the pattern n-1,n-2....n - (n-1)) n times. This implies that the number of comparisons is the summation of n natural numbers i.e. n(n-1)/2

------------------------------------------------------------------------------------------
	InsertionSort - Comparisons Best Case
	
	for (int ii = 0; ii < a.length(); ii++) { -----------------Occurs n times
		int temp = a[ii]
		int j;
		for (j = ii - 1; j >= 0 && temp < a[j]; j--) { //initializing this loop each time is a comparison, because the loop fails each time in the best case n - 1 comparisons are done by this step. 
			a[j+1] = a[j]
		a[j+1] = temp; 
		
		Therefore best case comparisons = n - 1
		
	InsertionSort - Comparisons Worst Case 
	
		for (int ii = 0; ii < a.length(); ii ++) {   ---- Occurs n times
			int  temp = a[ii]							
			int j;
			for (j = ii -1; j >= 0 && temp < a[j], j--) {     --Summation of nat numbers
				a[j+1] = a [j]
			a[j+1] = temp;
			
	Because the comparison for the initialization and maintenence of the loop occurs as the summation of natural numbers, the worst case comparisons is n(n-1)/2
	
	To get the "average" case for Insertion sort all we need to do is assume that every number is equally likely to occur. This essentially means that we can divide the summation of natural numbers loop by 2 to represent each item being equally likely to occur, resulting us with n(n-1)/4
	
	Analyzing the algorithm visually given what we have already calculated, it is easy to see that if the list is already sorted (best case) then the only movement done by our algorithm will placing the temp value into the place it is already in at the end of each loop.  For the sake of the purpose of this line we will treat this as a movement none the less, therefore indicating that the best case movements for insertion sort is n - 1  (which can be interpreted as zero if placing an item in its own place is not considered a movement) 
	
	We can also see that because the number of comparisons is equal to the number of times the second loop is executed multiplied plus n - 1 we can use this to estimate our movements for both the average and worst case. Giving us n(n-1)/2 for the worst case and n(n-1)4 for the average.

-------------------------------------------------------------------------------

	Selection sort - best case movements and comparisons
	
	int n = array.length;
	for (var ii = 0; ii < n - 1; ii++) {  occurs n times
		var min = ii;
		for (var jj = ii + 1; jj < n; jj++) {	occurs summation of natural numbers times
			if (array[jj] < (array[min]) { //comparison
				min = jj;
			}
			
		if (min != ii) {
			var temp = array[ii] //swap
			array[ii] = array [min]; //swap
			array[min] = temp; //swap
			}
		}
	}
	
	In the best case for selection sort (an already ordered list) n(n-1)/2 comparisons are done as the section of code that contains it is run the summation of natural numbers < n, however because min will always be ii in the best case no movements will ever be performed. 
	
Selection sort - worst case movements and comparisons 
	
	int n = array.length;
	for (var ii = 0; ii < n - 1; ii++) {  occurs n times
		var min = ii;
		for (var jj = ii + 1; jj < n; jj++) {	occurs summation of natural numbers times
			if (array[jj] < (array[min]) { //comparison
				min = jj;
			}
			
		if (min != ii) { //inner portion of loop occurs n times in the worst case, totalling 3n
			var temp = array[ii] //movement
			array[ii] = array [min]; //movement
			array[min] = temp; //swap //movement
			}
		}
	}
	
	In this case the number of comparisons is still equal to n(n-1)/2 as the number of comparisons is not determined by ordering, however the last loop is excited n times and contains 3 movements. Meaning worst case movements = 3n and average case movements = 3(n/2)
	
--------------------------------------------------------------------------------------

Using the fact that merge sort is tightly bounded nlg(n) it becomes significantly easier to get an exact number of expected swaps and comparisons for the algorithm. Because movements and comparisons are both only done together in merge sort bounded tightly by nlg(n) it can be concluded that merge sort does nlg(n) comparisons and nlg(n) movements




In conclusion we have justified - 

	Bubble Sort -
		Comparisons - 
			Tight - n(n-1)/2
	
	Insertion Sort - 
		Comparisons - 
			Best Case - n - 1
			Average Case n(n-1)/4
			Worst Case n(n-1)/2
		Movements - 
			Best Case - n - 1
			Average Case - n(n-1)/4
			Worst Case - n(n-1)/2
			
	Selection Sort - 
		Comparisons - 
			Tight - n(n-1)/2
		Movements -
			Best Case - 0 
			Average Case - 3(n/2)
			Worst Case - 3n
	
	Merge Sort - 
		Comparisons -
			Tight - nlg(n)
		Movements - 
			Tight - nlg(n)
			
In general the best case does not occur very often and as such is not very useful, however for aiding a proof of the validity of our counter locations a best case is neccassary. The average case however, is too specific of a case and is not neccassarily the actual average, making it largely unhelpful. 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Using these definitions to show the validity of our pointers. If our pointers are correct the results they give should mirror the results as expected from our expected values. 


Bubble Sort - 

	public class BubbleSort {
		public void sort(int[] array) {
			int comparisons = 0;
			int movements = 0;
			for (int ii = 0; ii < array.length - 1; ii++) {
				for (int jj = array.length - 1; jj > ii; jj--) {
					comparisons++;
					if (array[jj] < array[jj-1]) {
						var temp = array[jj - 1];
						movements++;
						array[jj - 1 ] = array[jj];
						movements++;
						array[jj] = temp;
						movements++;
					}
				}
			}
			System.out.println("Comparisons: " + comparisons);
			System.out.println("Movements: " + movements);
		}
	}
//Examples are n = 3
Theoretical, All Cases, - Comparisons = 3(3-1)/2 = 6/2 = 3
Result of best case input [1, 2, 3] from counters - Comparisons = 3
Result of average case input [2, 1, 3] from counters - Comparisons = 3
Result of worst case input [3, 2, 1] from counters - Comparisons = 3

Sufficiently showing that our counters are correctly placed for BubbleSort
------------------------------------------------------------------------------------

Insertion Sort - 
	public class InsertionSort {

    
		public void sort(int[] array) {
			int n = array.length;
			int comparisons = 0;
			int movements = 0;


			for (int j = 1; j < n; j++) {
				int k = array[j];
				movements++;

				int i = j-1;

				comparisons++;
				while (i > 0 && array[i] > k) {
					array[i+1] = array[i];
					movements++;
					i--;
					comparisons++;
				}
				array[i+1] = k;
				movements++;
			}

			System.out.println("Comparisons: " + comparisons);
			System.out.println("Movements: " + movements);
		}

	}

//Examples are n = 3
Theoretical Comparisons - Best Case = 3 - 1 = 2
Result of best case input [1, 2, 3] - Comparisons = 2
Theoretical Comparisons - Worst Case = 3(3-1)/2 = 3 
Result of worst case input [3, 2, 1] Comparisons = 3

Theoretical movements - Best Case = 3 - 1 = 2
Result of best case input [1, 2, 3] movements = 2
Theoretical movements - Worst Case = (3(2)/2 = 3
Result of worst case input [3, 2, 1] movements = 9
I could not find a worst case input for selection sort, however when analyzing the average movements it is close to 3n

------------------------------------------------------------------------------------------

Merge Sort

public class MergeSort {
    int movement = 0;
    int comparisons = 0;

    private void merge(int[] array, int p, int q, int r) {
        int n1 = (q - p + 1);
        int n2 = (r - q);

        int[] left = new int[n1];
        int[] right = new int[n2];

        

        for (int ii = 0; ii < (n1); ii++) {
            left[ii] = array[p + ii];
        }
        

        for (int ii = 0; ii < (n2); ii++) {
            right[ii] = array[q + 1 + ii];
        }
        
        // indexes are used to keep track of what portion of each subarray has already been placed.
        int leftIndex = 0;
        int rightIndex = 0;

        // total represents the total number of items we are merging which is used to prevent the uneccessary use of a while loop.
        
        int index = p;
        
        while (leftIndex < n1 && rightIndex < n2) {
            comparisons++;
            if ((left[leftIndex]) < (right[rightIndex])) {
                array[index] = left[leftIndex];
                movement++;
                index++;
                leftIndex++;
            }
            
            else {
                array[index] = right[rightIndex];
                movement++;
                index++;
                rightIndex++;
            }
        }

        while (leftIndex < n1) {
            //it should be noted that although no comparisons are actually
            //being made this is to simulate the number of comparisons that would be
            //made if sentinals were used. 
            comparisons++;
            array[index] = left[leftIndex];
            movement++;
            index++;
            leftIndex++;
        }

        while (rightIndex < n2) {
            comparisons++;
            array[index] = right[rightIndex];
            movement++;
            index++;
            rightIndex++;
        }
      

        
    }

    private void sort (int[] array, int p, int r) {
        if (p < r) {
            int q = ((p + r) / 2);
            sort(array, p, q);
            sort(array, (q + 1), r);
            merge(array, p, q, r);
        }
    }

    public void sort(int[] array) {
        sort(array, 0, array.length - 1);
        System.out.println("Comparisons: " + comparisons);
        System.out.println("Movements: " + movement);
    }
}


Merge sort is tightly bounded so we must only check one input-

Theoretical comparisons and movements - 4lg(4) = 8
Output when input = [3, 1, 0, 2] Comparisons = 8 Movements = 8
---------------------------------------------------------------------------


The result of all this work is that we now know for (relatively) certain that our counters are placed in the correct places and can therefore be used for practical analysis of our algorithms

-------------------------------------------------------------------------
Problem 5 - 
	The theta bound for the average number of movements for bubble sort is theta(n^2). This becomes clear when the points from our practical analysis are placed on a graph along with the graph y = x^2, where the points line up almost perfectly on the line. I will try and include an image of this in my submission. 
